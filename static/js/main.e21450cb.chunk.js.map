{"version":3,"sources":["component/Weather.jsx","component/Form.jsx","App.js","reportWebVitals.js","index.js"],"names":["Weather","props","className","cityname","weatherIcon","temp_celsius","maxminTemp","temp_min","temp_max","description","charAt","toUpperCase","slice","min","max","error","role","Form","onSubmit","loadweather","type","placeholder","name","autoComplete","App","getWeather","e","a","preventDefault","country","target","elements","value","city","fetch","api_call","json","response","setState","sys","main","weather","celsius","calCelsius","temp","get_WeatherIcon","id","console","log","state","undefined","icon","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","icons","rangeId","this","Math","floor","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e21450cb.chunk.js","sourcesContent":["import React from 'react'\r\nimport './weather.css'\r\n\r\nexport const Weather = (props) => {\r\n    \r\n    return (\r\n      <div className=\"container text-center\">\r\n      <div className=\"Card text-center\">\r\n        <h1 className=\"text-center text-white py-3\">{props.cityname}</h1>\r\n        <h5 className=\"py-4\">\r\n          <i className={`wi ${props.weatherIcon} display-1 text-white text-center`} />\r\n        </h5>\r\n\r\n        {/* Get Celsius */}\r\n        {props.temp_celsius ? (\r\n          <h1 className=\"py-2 text-white text-center\">{props.temp_celsius}&deg;</h1>\r\n        ) : null}\r\n\r\n        {/* show max and min temp */}\r\n        {maxminTemp(props.temp_min, props.temp_max)}\r\n\r\n        {/* Weather description */}\r\n        <h4 className=\"py-3 text-white text-center\">\r\n          {props.description.charAt(0).toUpperCase() +\r\n            props.description.slice(1)}\r\n        </h4>\r\n      </div>\r\n    </div>\r\n    )\r\n}\r\n\r\nfunction maxminTemp(min, max) {\r\n  if (max && min) {\r\n    return (\r\n      <h3 className=\"text-center\">\r\n        <span className=\"px-4 text-white\">{min}&deg;</span>\r\n        <span className=\"px-4 text-white\">{max}&deg;</span>\r\n      </h3>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport './form.css'\r\nfunction Form(props) {\r\n    return (\r\n        <div className=\"container h-100\">\r\n        <form onSubmit={props.loadweather}>\r\n          <div>{props.error ? error() : \"\"}</div>\r\n          <div className=\"row\">\r\n            <div className=\"col-md-3 offset-md-2\">\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                placeholder=\"City\"\r\n                name=\"city\"\r\n                autoComplete=\"off\"\r\n              />\r\n            </div>\r\n            <div className=\"col-md-3\">\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                placeholder=\"Country\"\r\n                name=\"country\"\r\n                autoComplete=\"off\"\r\n              />\r\n            </div>\r\n            <div className=\"col-md-3 mt-md-0 mt-2 text-md-left \">\r\n              <button className=\"btn btn-warning\">Get Weather</button>\r\n            </div>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    );\r\n}\r\nconst error = props => {\r\n    return (\r\n      <div className=\"alert alert-danger mx-5\" role=\"alert\">\r\n        Please Enter City and Country...!\r\n      </div>\r\n    );\r\n  };\r\nexport default Form;\r\n\r\n","import React, { useState, useEffect } from \"react\";\nimport { Weather } from './component/Weather';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"weather-icons/css/weather-icons.css\";\nimport Form from './component/Form'\nconst Api_Key = \"83cd18e20ee8978fb9f3ecdf5297545e\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      city: undefined,\n      country: undefined,\n      icon: undefined,\n      main: undefined,\n      celsius: undefined,\n      temp_max: null,\n      temp_min: null,\n      description: \"\",\n      error: false\n    };\n\n    this.weatherIcon = {\n      Thunderstorm: \"wi-thunderstorm\",\n      Drizzle: \"wi-sleet\",\n      Rain: \"wi-storm-showers\",\n      Snow: \"wi-snow\",\n      Atmosphere: \"wi-fog\",\n      Clear: \"wi-day-sunny\",\n      Clouds: \"wi-day-fog\"\n    };\n  }\n\n  get_WeatherIcon(icons, rangeId) {\n    switch (true) {\n      case rangeId >= 200 && rangeId < 232:\n        this.setState({ icon: icons.Thunderstorm });\n        break;\n      case rangeId >= 300 && rangeId <= 321:\n        this.setState({ icon: icons.Drizzle });\n        break;\n      case rangeId >= 500 && rangeId <= 521:\n        this.setState({ icon: icons.Rain });\n        break;\n      case rangeId >= 600 && rangeId <= 622:\n        this.setState({ icon: icons.Snow });\n        break;\n      case rangeId >= 701 && rangeId <= 781:\n        this.setState({ icon: icons.Atmosphere });\n        break;\n      case rangeId === 800:\n        this.setState({ icon: icons.Clear });\n        break;\n      case rangeId >= 801 && rangeId <= 804:\n        this.setState({ icon: icons.Clouds });\n        break;\n      default:\n        this.setState({ icon: icons.Clouds });\n    }\n  }\n\n  calCelsius(temp) {\n    let cell = Math.floor(temp - 273.15);\n    return cell;\n  }\n\n  getWeather = async e => {\n    e.preventDefault();\n\n    const country = e.target.elements.country.value;\n    const city = e.target.elements.city.value;\n\n    if (country && city) {\n      const api_call = await fetch(\n        `https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${Api_Key}`\n      );\n\n      const response = await api_call.json();\n\n      this.setState({\n        city: `${response.name}, ${response.sys.country}`,\n        country: response.sys.country,\n        main: response.weather[0].main,\n        celsius: this.calCelsius(response.main.temp),\n        temp_max: this.calCelsius(response.main.temp_max),\n        temp_min: this.calCelsius(response.main.temp_min),\n        description: response.weather[0].description,\n        error: false\n      });\n\n      // seting icons\n      this.get_WeatherIcon(this.weatherIcon, response.weather[0].id);\n\n      console.log(response);\n    } else {\n      this.setState({\n        error: true\n      });\n    }\n  };\n\n  render() {\n    return (\n      <div className={`App`}>\n        <Form loadweather={this.getWeather} error={this.state.error} />\n        <Weather\n          cityname={this.state.city}\n          weatherIcon={this.state.icon}\n          temp_celsius={this.state.celsius}\n          temp_max={this.state.temp_max}\n          temp_min={this.state.temp_min}\n          description={this.state.description}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}